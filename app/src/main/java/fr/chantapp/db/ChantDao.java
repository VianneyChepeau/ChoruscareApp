package fr.chantapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANT".
*/
public class ChantDao extends AbstractDao<Chant, Long> {

    public static final String TABLENAME = "CHANT";

    /**
     * Properties of entity Chant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property LibelleChant = new Property(1, String.class, "libelleChant", false, "LIBELLE_CHANT");
        public final static Property AuteurChant = new Property(2, String.class, "auteurChant", false, "AUTEUR_CHANT");
        public final static Property CompositeurChant = new Property(3, String.class, "compositeurChant", false, "COMPOSITEUR_CHANT");
        public final static Property CheminPartitionChant = new Property(4, String.class, "cheminPartitionChant", false, "CHEMIN_PARTITION_CHANT");
    }

    private DaoSession daoSession;


    public ChantDao(DaoConfig config) {
        super(config);
    }
    
    public ChantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"LIBELLE_CHANT\" TEXT NOT NULL ," + // 1: libelleChant
                "\"AUTEUR_CHANT\" TEXT NOT NULL ," + // 2: auteurChant
                "\"COMPOSITEUR_CHANT\" TEXT NOT NULL ," + // 3: compositeurChant
                "\"CHEMIN_PARTITION_CHANT\" TEXT);"); // 4: cheminPartitionChant
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chant entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getLibelleChant());
        stmt.bindString(3, entity.getAuteurChant());
        stmt.bindString(4, entity.getCompositeurChant());
 
        String cheminPartitionChant = entity.getCheminPartitionChant();
        if (cheminPartitionChant != null) {
            stmt.bindString(5, cheminPartitionChant);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chant entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getLibelleChant());
        stmt.bindString(3, entity.getAuteurChant());
        stmt.bindString(4, entity.getCompositeurChant());
 
        String cheminPartitionChant = entity.getCheminPartitionChant();
        if (cheminPartitionChant != null) {
            stmt.bindString(5, cheminPartitionChant);
        }
    }

    @Override
    protected final void attachEntity(Chant entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Chant readEntity(Cursor cursor, int offset) {
        Chant entity = new Chant( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // libelleChant
            cursor.getString(offset + 2), // auteurChant
            cursor.getString(offset + 3), // compositeurChant
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // cheminPartitionChant
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chant entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLibelleChant(cursor.getString(offset + 1));
        entity.setAuteurChant(cursor.getString(offset + 2));
        entity.setCompositeurChant(cursor.getString(offset + 3));
        entity.setCheminPartitionChant(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chant entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chant entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chant entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
