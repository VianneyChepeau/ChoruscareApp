package fr.chantapp.db;

import org.greenrobot.greendao.annotation.*;

import fr.chantapp.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "PAROLE".
 */
@Entity(active = true)
public class Parole {

    @Id
    @Unique
    private long id;

    @NotNull
    private String contenuParole;
    private long ordreAffichageParole;
    private long chantIdParole;
    private long typeParoleIdParole;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ParoleDao myDao;

    @ToOne(joinProperty = "chantIdParole")
    private Chant chant;

    @Generated
    private transient Long chant__resolvedKey;

    @ToOne(joinProperty = "typeParoleIdParole")
    private TypeParole typeParole;

    @Generated
    private transient Long typeParole__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Parole() {
    }

    public Parole(long id) {
        this.id = id;
    }

    @Generated
    public Parole(long id, String contenuParole, long ordreAffichageParole, long chantIdParole, long typeParoleIdParole) {
        this.id = id;
        this.contenuParole = contenuParole;
        this.ordreAffichageParole = ordreAffichageParole;
        this.chantIdParole = chantIdParole;
        this.typeParoleIdParole = typeParoleIdParole;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParoleDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @NotNull
    public String getContenuParole() {
        return contenuParole;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContenuParole(@NotNull String contenuParole) {
        this.contenuParole = contenuParole;
    }

    public long getOrdreAffichageParole() {
        return ordreAffichageParole;
    }

    public void setOrdreAffichageParole(long ordreAffichageParole) {
        this.ordreAffichageParole = ordreAffichageParole;
    }

    public long getChantIdParole() {
        return chantIdParole;
    }

    public void setChantIdParole(long chantIdParole) {
        this.chantIdParole = chantIdParole;
    }

    public long getTypeParoleIdParole() {
        return typeParoleIdParole;
    }

    public void setTypeParoleIdParole(long typeParoleIdParole) {
        this.typeParoleIdParole = typeParoleIdParole;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Chant getChant() {
        long __key = this.chantIdParole;
        if (chant__resolvedKey == null || !chant__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ChantDao targetDao = daoSession.getChantDao();
            Chant chantNew = targetDao.load(__key);
            synchronized (this) {
                chant = chantNew;
            	chant__resolvedKey = __key;
            }
        }
        return chant;
    }

    @Generated
    public void setChant(Chant chant) {
        if (chant == null) {
            throw new DaoException("To-one property 'chantIdParole' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.chant = chant;
            chantIdParole = chant.getId();
            chant__resolvedKey = chantIdParole;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public TypeParole getTypeParole() {
        long __key = this.typeParoleIdParole;
        if (typeParole__resolvedKey == null || !typeParole__resolvedKey.equals(__key)) {
            __throwIfDetached();
            TypeParoleDao targetDao = daoSession.getTypeParoleDao();
            TypeParole typeParoleNew = targetDao.load(__key);
            synchronized (this) {
                typeParole = typeParoleNew;
            	typeParole__resolvedKey = __key;
            }
        }
        return typeParole;
    }

    @Generated
    public void setTypeParole(TypeParole typeParole) {
        if (typeParole == null) {
            throw new DaoException("To-one property 'typeParoleIdParole' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.typeParole = typeParole;
            typeParoleIdParole = typeParole.getId();
            typeParole__resolvedKey = typeParoleIdParole;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
