package fr.chantapp.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAROLE".
*/
public class ParoleDao extends AbstractDao<Parole, Long> {

    public static final String TABLENAME = "PAROLE";

    /**
     * Properties of entity Parole.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ContenuParole = new Property(1, String.class, "contenuParole", false, "CONTENU_PAROLE");
        public final static Property OrdreAffichageParole = new Property(2, long.class, "ordreAffichageParole", false, "ORDRE_AFFICHAGE_PAROLE");
        public final static Property ChantIdParole = new Property(3, long.class, "chantIdParole", false, "CHANT_ID_PAROLE");
        public final static Property TypeParoleIdParole = new Property(4, long.class, "typeParoleIdParole", false, "TYPE_PAROLE_ID_PAROLE");
    }

    private DaoSession daoSession;

    private Query<Parole> chant_ParolesQuery;

    public ParoleDao(DaoConfig config) {
        super(config);
    }
    
    public ParoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAROLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"CONTENU_PAROLE\" TEXT NOT NULL ," + // 1: contenuParole
                "\"ORDRE_AFFICHAGE_PAROLE\" INTEGER NOT NULL ," + // 2: ordreAffichageParole
                "\"CHANT_ID_PAROLE\" INTEGER NOT NULL ," + // 3: chantIdParole
                "\"TYPE_PAROLE_ID_PAROLE\" INTEGER NOT NULL );"); // 4: typeParoleIdParole
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAROLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Parole entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getContenuParole());
        stmt.bindLong(3, entity.getOrdreAffichageParole());
        stmt.bindLong(4, entity.getChantIdParole());
        stmt.bindLong(5, entity.getTypeParoleIdParole());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Parole entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getContenuParole());
        stmt.bindLong(3, entity.getOrdreAffichageParole());
        stmt.bindLong(4, entity.getChantIdParole());
        stmt.bindLong(5, entity.getTypeParoleIdParole());
    }

    @Override
    protected final void attachEntity(Parole entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Parole readEntity(Cursor cursor, int offset) {
        Parole entity = new Parole( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // contenuParole
            cursor.getLong(offset + 2), // ordreAffichageParole
            cursor.getLong(offset + 3), // chantIdParole
            cursor.getLong(offset + 4) // typeParoleIdParole
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Parole entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setContenuParole(cursor.getString(offset + 1));
        entity.setOrdreAffichageParole(cursor.getLong(offset + 2));
        entity.setChantIdParole(cursor.getLong(offset + 3));
        entity.setTypeParoleIdParole(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Parole entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Parole entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Parole entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "paroles" to-many relationship of Chant. */
    public List<Parole> _queryChant_Paroles(long chantIdParole) {
        synchronized (this) {
            if (chant_ParolesQuery == null) {
                QueryBuilder<Parole> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChantIdParole.eq(null));
                queryBuilder.orderRaw("T.'ORDRE_AFFICHAGE_PAROLE' ASC");
                chant_ParolesQuery = queryBuilder.build();
            }
        }
        Query<Parole> query = chant_ParolesQuery.forCurrentThread();
        query.setParameter(0, chantIdParole);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getChantDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTypeParoleDao().getAllColumns());
            builder.append(" FROM PAROLE T");
            builder.append(" LEFT JOIN CHANT T0 ON T.\"CHANT_ID_PAROLE\"=T0.\"_id\"");
            builder.append(" LEFT JOIN TYPE_PAROLE T1 ON T.\"TYPE_PAROLE_ID_PAROLE\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Parole loadCurrentDeep(Cursor cursor, boolean lock) {
        Parole entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Chant chant = loadCurrentOther(daoSession.getChantDao(), cursor, offset);
         if(chant != null) {
            entity.setChant(chant);
        }
        offset += daoSession.getChantDao().getAllColumns().length;

        TypeParole typeParole = loadCurrentOther(daoSession.getTypeParoleDao(), cursor, offset);
         if(typeParole != null) {
            entity.setTypeParole(typeParole);
        }

        return entity;    
    }

    public Parole loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Parole> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Parole> list = new ArrayList<Parole>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Parole> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Parole> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
